name: Sync Issues to docs/issues

on:
  issues:
    types: [opened, edited, labeled, unlabeled, closed, reopened]
  schedule:
    - cron: '0 18 * * *'
  workflow_dispatch:

permissions:
  contents: write
  issues: read

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Render issue to file
        id: render
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            async function renderOne(owner, repo, number){
              const { data: iss } = await github.rest.issues.get({ owner, repo, issue_number: number });
              const slug = iss.title.toLowerCase()
                .replace(/[^a-z0-9一-龯ぁ-んァ-ヶー・]+/g,'-')
                .replace(/(^-|-$)/g,'');
              const dir = path.join(process.cwd(), 'docs', 'issues');
              fs.mkdirSync(dir, { recursive: true });
              const file = path.join(dir, `${iss.number}-${slug}.md`);
              const fm = [
                '---',
                `number: ${iss.number}`,
                `state: ${iss.state}`,
                `title: ${JSON.stringify(iss.title)}`,
                `labels: [${iss.labels.map(l=>JSON.stringify(l.name)).join(', ')}]`,
                `assignees: [${iss.assignees.map(a=>JSON.stringify(a.login)).join(', ')}]`,
                `updated_at: ${JSON.stringify(iss.updated_at)}`,
                '---',
                ''
              ].join('\n');
              fs.writeFileSync(file, fm + (iss.body||''), 'utf8');
              return file;
            }

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const ev = context.payload;
            let changed = [];
            if (ev.issue) {
              changed.push(await renderOne(owner, repo, ev.issue.number));
            } else {
              const { data: issues } = await github.rest.issues.listForRepo({ owner, repo, state: 'all', per_page: 100 });
              for (const iss of issues) {
                changed.push(await renderOne(owner, repo, iss.number));
              }
            }
            core.setOutput('changed', JSON.stringify(changed));

      - name: Commit changes
        if: steps.render.outputs.changed != '[]'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs(issues): sync"
          add: "docs/issues/*.md"